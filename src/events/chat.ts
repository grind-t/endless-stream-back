import { mediaShare, Media, MediaType } from '../data/media-share.js'
import { User, getChat, UserRole } from '../clients/app.js'
import { getYoutubeApi } from '../clients/youtube.js'
import { getIO } from '../server.js'
import { findLastIndex } from '../utils.js'
import { handleMediaEnd } from './media.js'

export type CommandHandler = (user: User, args: string) => Promise<void>

export interface Command {
  arguments?: string[]
  description: string
  cost: number
  role: UserRole
  example: string
  handler: CommandHandler
}

export const commands: Record<string, Command> = {
  '!–º–µ–¥–∏–∞+': {
    arguments: ['—Å—Å—ã–ª–∫–∞ –Ω–∞ —é—Ç—É–± –≤–∏–¥–µ–æ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç'],
    description: '–∑–∞–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç',
    cost: 0,
    role: UserRole.Viewer,
    example: '!–º–µ–¥–∏–∞+ https://youtu.be/YlKXLGxMvw4',
    async handler(user, args) {
      const io = getIO()
      const chat = getChat()
      if (mediaShare.queue.length >= mediaShare.maxQueue) {
        const error = `@${user.name}, –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ ü§ï`
        return chat.say(error)
      }
      const userRequests = mediaShare.queue.reduce(
        (acc, req) => (req.user.id === user.id ? acc + 1 : acc),
        0
      )
      if (userRequests >= mediaShare.maxUserRequests) {
        const error = `@${user.name}, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤ (${mediaShare.maxUserRequests}) ü§ï`
        return chat.say(error)
      }
      let mediaId: string | null | undefined
      let mediaType: MediaType
      try {
        const url = new URL(args)
        const lastSegment = url.pathname.split('/').at(-1)
        if (lastSegment === 'playlist') {
          mediaId = url.searchParams.get('list')
          mediaType = MediaType.Playlist
        } else {
          mediaId = url.searchParams.get('v') || lastSegment
          mediaType = MediaType.Video
        }
      } catch {
        mediaId = args
        mediaType = mediaId.length === 11 ? MediaType.Video : MediaType.Playlist
      }
      if (!mediaId) {
        const error = `@${user.name}, –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ ü§ï`
        return chat.say(error)
      }
      let media: Media | undefined
      const youtube = getYoutubeApi()
      if (mediaType === MediaType.Video) {
        const video = await youtube.videos
          .list({ id: [mediaId], part: ['snippet'] })
          .then((r) => r.data.items?.at(0))
          .catch(console.error)
        if (video && video.snippet) {
          const mediaTitle = video.snippet.title || ''
          media = { id: mediaId, title: mediaTitle, type: mediaType }
        }
      } else {
        const playlist = await youtube.playlists
          .list({ id: [mediaId], part: ['snippet'] })
          .then((r) => r.data.items?.at(0))
          .catch(console.error)
        if (playlist && playlist.snippet) {
          const mediaTitle = playlist.snippet.title || ''
          media = { id: mediaId, title: mediaTitle, type: mediaType }
        }
      }
      if (!media) {
        const error = `@${user.name}, –≤–∏–¥–µ–æ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ü§ï`
        return chat.say(error)
      }
      const req = { user, media }
      const newLen = mediaShare.queue.push(req)
      if (newLen === 1) io.emit('media/changed', media)
      const success = `@${user.name} –¥–æ–±–∞–≤–∏–ª –≤ –æ—á–µ—Ä–µ–¥—å "${media.title}"`
      return chat.say(success)
    },
  },
  '!–º–µ–¥–∏–∞-': {
    description: '—É–¥–∞–ª–∏—Ç—å —Ç–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑',
    cost: 0,
    role: UserRole.Viewer,
    example: '!–º–µ–¥–∏–∞-',
    async handler(user) {
      const chat = getChat()
      const queue = mediaShare.queue
      const reqIdx = findLastIndex(queue, (req) => req.user.id === user.id)
      if (reqIdx === -1) {
        const error = `@${user.name}, –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç —Ç–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤ ü§ï`
        return chat.say(error)
      }
      const media = queue[reqIdx].media
      if (reqIdx === 0) handleMediaEnd()
      else queue.splice(reqIdx, 1)
      const success = `@${user.name} —É–¥–∞–ª–∏–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏ "${media.title}"`
      return chat.say(success)
    },
  },
  '!–º–µ–¥–∏–∞': {
    description: '—É–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞',
    cost: 0,
    role: UserRole.Viewer,
    example: '!–≤–∏–¥–µ–æ',
    async handler() {
      const chat = getChat()
      if (!mediaShare.queue.length) {
        const error = `–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è ü§ï`
        return chat.say(error)
      }
      const media = mediaShare.queue[0].media
      const success = `–°–µ–π—á–∞—Å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è "${media.title}"`
      return chat.say(success)
    },
  },
  '!—Å–∫–∏–ø': {
    description: '–ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞',
    cost: 0,
    role: UserRole.Viewer,
    example: '!—Å–∫–∏–ø',
    async handler(user) {
      const chat = getChat()
      if (!mediaShare.queue.length) {
        const error = `–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è ü§ï`
        return chat.say(error)
      }
      const media = mediaShare.queue[0].media
      mediaShare.skipVoters.add(user.id)
      if (mediaShare.skipVoters.size === mediaShare.votesToSkip) {
        handleMediaEnd()
        const success = `"${media.title}" –ø—Ä–æ–ø—É—â–µ–Ω–æ`
        return chat.say(success)
      }
      const remaining = mediaShare.votesToSkip - mediaShare.skipVoters.size
      const success = `@${user.name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ –ø—Ä–æ–ø—É—Å–∫ "${media.title}" (–≥–æ–ª–æ—Å–æ–≤ –¥–æ –ø—Ä–æ–ø—É—Å–∫–∞: ${remaining})`
      return chat.say(success)
    },
  },
  '!–≤–µ—Ç–æ': {
    description: '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç',
    cost: 0,
    role: UserRole.Moderator,
    example: '!–≤–µ—Ç–æ',
    async handler(user) {
      if (!mediaShare.queue.length || user.role < this.role) return
      const chat = getChat()
      const media = mediaShare.queue[0].media
      handleMediaEnd()
      const success = `"${media.title}" –ø—Ä–æ–ø—É—â–µ–Ω–æ`
      return chat.say(success)
    },
  },
  '!—à–∞—Ä—ã': {
    description: '–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–∞–≥–∏—á–µ—Å–∫–∏–º —à–∞—Ä–∞–º',
    cost: 0,
    role: UserRole.Viewer,
    example: '!—à–∞—Ä—ã –î—è–¥—è –ë–æ–≥–¥–∞–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?',
    async handler(user) {
      const chat = getChat()
      const replies = [
        '–ë–µ—Å—Å–ø–æ—Ä–Ω–æ',
        '–≠—Ç–æ –ø—Ä–µ–¥—Ä–µ—à–µ–Ω–æ',
        '–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è',
        '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–∞',
        '–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º',
        '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è - –¥–∞',
        '–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ',
        '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ö–æ—Ä–æ—à–∏–µ',
        '–ó–Ω–∞–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç',
        '–î–∞',
        '–û—Ç–≤–µ—Ç –∑–∞—Ç—É–º–∞–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
        '–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ',
        '–õ—É—á—à–µ —Ç–µ–±–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å',
        '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å',
        '–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ —Å–Ω–æ–≤–∞',
        '–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π',
        '–ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç',
        '–ü–æ –º–æ–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º - –Ω–µ—Ç',
        '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ',
        '–û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ',
      ]
      const reply = replies[Math.floor(Math.random() * replies.length)]
      return chat.say(`@${user.name}, ${reply}`)
    },
  },
}

export function handleCommand(user: User, command: string): Promise<void> {
  const match = command.match(/(!\S+)\s*(.*)/)
  if (!match) return Promise.resolve()
  const name = match[1]
  const args = match[2]
  if (!commands[name]) return Promise.resolve()
  return commands[name].handler(user, args)
}

export function handleMessage(user: User, message: string): Promise<void> {
  if (message[0] === '!') return handleCommand(user, message)
  return Promise.resolve()
}

export function handleJoin(user: string): Promise<void> {
  const chat = getChat()
  const m = `@${user}, –ø—Ä–∏–≤–µ—Ç, –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–æ–º –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏`
  return chat.say(m)
}
